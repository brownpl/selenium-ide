// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`command code emitter should emit "add selection" command 1`] = `"$I->selectOption(['css' => 'select'], \\"A label\\");"`;

exports[`command code emitter should emit "answer on visible prompt" command 1`] = `"$I->typeInPopup(\\"an answer\\");$I->acceptPopup();"`;

exports[`command code emitter should emit "assert alert" command 1`] = `"$I->seeInPopup(an alert);"`;

exports[`command code emitter should emit "assert checked" command 1`] = `"$I->seeCheckboxIsChecked(['id' => 'check']);"`;

exports[`command code emitter should emit "assert confirmation" command 1`] = `"$I->seeInPopup(a confirmation);"`;

exports[`command code emitter should emit "assert editable" command 1`] = `undefined`;

exports[`command code emitter should emit "assert element not present" command 1`] = `"$I->dontSeeElementInDOM(['id' => 'element']);"`;

exports[`command code emitter should emit "assert element present" command 1`] = `"$I->seeElementInDOM(['id' => 'element']);"`;

exports[`command code emitter should emit "assert not checked" command 1`] = `"$I->dontSeeCheckboxIsChecked(['id' => 'check']);"`;

exports[`command code emitter should emit "assert not editable" command 1`] = `undefined`;

exports[`command code emitter should emit "assert not selected value" command 1`] = `"$I->dontSeeInField(['id' => 'select'], test);"`;

exports[`command code emitter should emit "assert not text" command 1`] = `"$I->dontSee(\\"text\\", ['id' => 'test']);"`;

exports[`command code emitter should emit "assert prompt" command 1`] = `"$I->seeInPopup(a prompt);"`;

exports[`command code emitter should emit "assert selected value" command 1`] = `"$I->seeInField(['id' => 'select'], \\"test\\");"`;

exports[`command code emitter should emit "assert text" command 1`] = `"$I->see(\\"some text that should be here\\", ['id' => 'test']);"`;

exports[`command code emitter should emit "assert title" command 1`] = `"$I->seeInTitle(\\"example title\\");"`;

exports[`command code emitter should emit "assert value" command 1`] = `"$I->seeInField(['id' => 'select'], \\"test\\");"`;

exports[`command code emitter should emit "assert" command 1`] = `"$this->assertSame($varrrName,\\"blah\\");"`;

exports[`command code emitter should emit "check" command 1`] = `"$I->checkOption(['id' => 'f']);"`;

exports[`command code emitter should emit "choose cancel on visible prompt" command 1`] = `"$I->cancelPopup();"`;

exports[`command code emitter should emit "choose ok on visible confirmation" command 1`] = `"$I->acceptPopup();"`;

exports[`command code emitter should emit "click at" command 1`] = `"$I->click(['link' => 'button']);"`;

exports[`command code emitter should emit "click" command 1`] = `"$I->click(['link' => 'button']);"`;

exports[`command code emitter should emit "close" command 1`] = `"$this->getModule('WebDriver')->_closeSession();"`;

exports[`command code emitter should emit "do" command 1`] = `
Object {
  "body": "do {",
  "endingLevel": 1,
}
`;

exports[`command code emitter should emit "double click at" command 1`] = `"$I->doubleClick(['link' => 'button']);"`;

exports[`command code emitter should emit "double click" command 1`] = `"$I->doubleClick(['link' => 'button']);"`;

exports[`command code emitter should emit "drag and drop to object" command 1`] = `"$I->dragAndDrop(['link' => 'dragged'], ['link' => 'dropped']);"`;

exports[`command code emitter should emit "echo" command 1`] = `"print(\\"blah\\");"`;

exports[`command code emitter should emit "echo" command with variables 1`] = `"print($blah);"`;

exports[`command code emitter should emit "edit content" command 1`] = `undefined`;

exports[`command code emitter should emit "else if" command 1`] = `
Object {
  "body": "} else if ($I->executeJS(\\"return true\\")) {",
  "endingLevel": 1,
}
`;

exports[`command code emitter should emit "else" command 1`] = `
Object {
  "body": "} else {",
  "endingLevel": 1,
}
`;

exports[`command code emitter should emit "end" command 1`] = `
Object {
  "body": "}",
  "endingLevel": 0,
}
`;

exports[`command code emitter should emit "execute async script" command 1`] = `"$myVar = $I->executeAsyncJS(\\"var callback = arguments[arguments.length - 1];javascript.then(callback).catch(callback);\\")"`;

exports[`command code emitter should emit "execute script" command 1`] = `"$myVar = $I->executeJS(\\"javascript\\");"`;

exports[`command code emitter should emit "execute script" command with return string value 1`] = `"$myVar = $I->executeJS(\\"return 'a'\\");"`;

exports[`command code emitter should emit "forEach" command 1`] = `
Object {
  "body": "$collection = $collection;
for ($i = 0; $i < sizeof($collection); $i++) {
  $iteratorVar = $collection;",
  "endingLevel": 1,
}
`;

exports[`command code emitter should emit "if" command 1`] = `
Object {
  "body": "if ($I->executeJS(\\"return true\\")) {",
  "endingLevel": 1,
}
`;

exports[`command code emitter should emit "mouse down at" event 1`] = `undefined`;

exports[`command code emitter should emit "mouse down" command 1`] = `
"$I->executeInSelenium(function (\\\\Facebook\\\\WebDriver\\\\Remote\\\\RemoteWebDriver $webdriver) {
    
    $coordinates = $webdriver->findElement(['id' => 'button'])->getCoordinates();
    $webdriver->getMouse()->mouseDown($coordinates);
  
  });"
`;

exports[`command code emitter should emit "mouse move at" event 1`] = `undefined`;

exports[`command code emitter should emit "mouse out" event 1`] = `"$I->moveMouseTo(\\"body\\", 0, 0);"`;

exports[`command code emitter should emit "mouse over" event 1`] = `"$I->moveMouseOver(['id' => 'button']);"`;

exports[`command code emitter should emit "mouse up at" event 1`] = `undefined`;

exports[`command code emitter should emit "mouse up" event 1`] = `
"$I->executeInSelenium(function (\\\\Facebook\\\\WebDriver\\\\Remote\\\\RemoteWebDriver $webdriver) {
    
    $coordinates = $webdriver->findElement(['id' => 'button'])->getCoordinates();
    $webdriver->getMouse()->mouseUp($coordinates);
  
  });"
`;

exports[`command code emitter should emit "open" with absolute url 1`] = `"$I->amOnUrl(\\"https://www.seleniumhq.org/\\");"`;

exports[`command code emitter should emit "pause" command 1`] = `"$I->wait(300);"`;

exports[`command code emitter should emit "remove selection" command 1`] = `"$I->unselectOption(['css' => 'select'], \\"A label\\");"`;

exports[`command code emitter should emit "repeatIf" command 1`] = `"} while($I->executeJS(return (true)\\"););"`;

exports[`command code emitter should emit "run script" command 1`] = `"$I->executeJS(\\"alert('test');alert('Im annoying');\\");"`;

exports[`command code emitter should emit "run" command 1`] = `undefined`;

exports[`command code emitter should emit "select frame" to select the top frame 1`] = `
"$I->executeInSelenium(function (\\\\Facebook\\\\WebDriver\\\\Remote\\\\RemoteWebDriver $webdriver) {
    
      $webdriver->switchTo()->defaultContent();
    
  });"
`;

exports[`command code emitter should emit "select window" to select a window by handle 1`] = `undefined`;

exports[`command code emitter should emit "select window" to select a window by implicit index 1`] = `undefined`;

exports[`command code emitter should emit "select window" to select a window by name 1`] = `undefined`;

exports[`command code emitter should emit "select window" to select a window by the local keyword 1`] = `undefined`;

exports[`command code emitter should emit "select" command 1`] = `"$I->selectOption(['css' => 'select'], \\"A label\\");"`;

exports[`command code emitter should emit "send keys" command 1`] = `"$I->fillField(['id' => 'input'], \\"example input\\");"`;

exports[`command code emitter should emit "send keys" command with a key press 1`] = `"$I->fillField(['id' => 'input'], \\"SuperSecretPassword!\\", Key.ENTER);"`;

exports[`command code emitter should emit "send keys" command with a variable input 1`] = `"$I->fillField(['id' => 'input'], $blah);"`;

exports[`command code emitter should emit "set speed" 1`] = `"print(\\"\`set speed\` is a no-op in code export, use \`pause\` instead\\");"`;

exports[`command code emitter should emit "setWindowSize" 1`] = `"$I->resizeWindow(1440, 1177);"`;

exports[`command code emitter should emit "store attribute" command 1`] = `undefined`;

exports[`command code emitter should emit "store json" command 1`] = `"$myVar = json_decode('[{\\"a\\":0}]');"`;

exports[`command code emitter should emit "store text" command 1`] = `"$myVar = $I->grabTextFrom(['id' => 'someElement']);"`;

exports[`command code emitter should emit "store title" command 1`] = `"$myVar = $I->grabTextFrom(['xpath' => \\"//title\\"]);"`;

exports[`command code emitter should emit "store value" command 1`] = `"$myVar = $I->grabValueFrom(['id' => 'someElement']);"`;

exports[`command code emitter should emit "store window handle" command 1`] = `undefined`;

exports[`command code emitter should emit "store xpath count" command 1`] = `undefined`;

exports[`command code emitter should emit "store" command 1`] = `"$myVar = \\"some value\\";"`;

exports[`command code emitter should emit "submit" command 1`] = `"$I->click(['css' => 'input[type=submit]']);"`;

exports[`command code emitter should emit "times" command 1`] = `
"$times = 5;
for($i = 0; i < sizeof($times); $i++) {"
`;

exports[`command code emitter should emit "type" command 1`] = `"$I->fillField(['id' => 'input'], \\"example input\\");"`;

exports[`command code emitter should emit "uncheck" command 1`] = `"$I->uncheckOption(['id' => 'f']);"`;

exports[`command code emitter should emit "verify checked" command 1`] = `"$I->seeCheckboxIsChecked(['id' => 'check']);"`;

exports[`command code emitter should emit "verify editable" command 1`] = `
"$I->executeInSelenium(function (\\\\Facebook\\\\WebDriver\\\\Remote\\\\RemoteWebDriver $webdriver) {
    
    $webdriver->findElement(['id' => 'text'])->isEnabled();
  
  });"
`;

exports[`command code emitter should emit "verify element not present" command 1`] = `"$I->dontSeeElementInDOM(['id' => 'element']);"`;

exports[`command code emitter should emit "verify element present" command 1`] = `"$I->seeElementInDOM(['id' => 'element']);"`;

exports[`command code emitter should emit "verify not checked" command 1`] = `"$I->seeCheckboxIsNotChecked(['id' => 'check']);"`;

exports[`command code emitter should emit "verify not editable" command 1`] = `
"$I->executeInSelenium(function (\\\\Facebook\\\\WebDriver\\\\Remote\\\\RemoteWebDriver $webdriver) {
    
    !$webdriver->findElement(['id' => 'text'])->isEnabled();
  
  });"
`;

exports[`command code emitter should emit "verify not selected value" command 1`] = `"$I->dontSeeInField(['id' => 'select'], test);"`;

exports[`command code emitter should emit "verify not text" command 1`] = `"$I->dontSee(\\"text\\", ['id' => 'test']);"`;

exports[`command code emitter should emit "verify selected value" command 1`] = `"$I->seeInField(['id' => 'select'], \\"test\\");"`;

exports[`command code emitter should emit "verify text" command 1`] = `"$I->see(\\"some text that should be here\\", ['id' => 'test']);"`;

exports[`command code emitter should emit "verify title" command 1`] = `"$I->seeInTitle(\\"example title\\");"`;

exports[`command code emitter should emit "verify value" command 1`] = `"$I->seeInField(['id' => 'select'], \\"test\\");"`;

exports[`command code emitter should emit "verify" command 1`] = `"$I->assertEqual($varrrName,\\"blah\\");"`;

exports[`command code emitter should emit "waitForElementEditable" command 1`] = `undefined`;

exports[`command code emitter should emit "waitForElementNotEditable" command 1`] = `undefined`;

exports[`command code emitter should emit "waitForElementNotPresent" command 1`] = `undefined`;

exports[`command code emitter should emit "waitForElementNotVisible" command 1`] = `"$I->waitForElementNotVisible(['css' => '#blah'], 5000);"`;

exports[`command code emitter should emit "waitForElementPresent" command 1`] = `undefined`;

exports[`command code emitter should emit "waitForElementVisible" command 1`] = `"$I->waitForElementVisible(['css' => '#blah'], 5000);"`;

exports[`command code emitter should emit "waitForText" command 1`] = `"$I->waitForText(\\"text\\", ['css' => '#blah']);"`;

exports[`command code emitter should emit "while" command 1`] = `"while($I->executeJS(\\"return true\\")) {"`;

exports[`command code emitter should emit 'assert selected label' command 1`] = `"$I->seeInField(['id' => 'test'], \\"test\\");"`;

exports[`command code emitter should emit 'verify selected label' command 1`] = `"$I->seeInField(['id' => 'test'], \\"test\\");"`;

exports[`command code emitter should emit new window handling, if command opens a new window 1`] = `undefined`;
