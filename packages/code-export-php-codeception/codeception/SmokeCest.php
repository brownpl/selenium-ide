<?php
// Generated by Selenium IDE
use Faker\Factory;

class SmokeCest
{
    public function _before(AcceptanceTester $I)
    {
    }
    public function _after(AcceptanceTester $I)
    {
    }
    public function check(AcceptanceTester $I){
        // Test name: check
        // Step # | name | target | value | comment
        // 1 | open | /checkboxes |  |
        $I->amOnPage("/checkboxes");
        // 2 | check | css=input |  |
        $I->checkOption(['css' => 'input']);
        // 3 | assertChecked | css=input |  |
        $I->seeCheckboxIsChecked(['css' => 'input']);
        // 4 | uncheck | css=input |  |
        $I->uncheckOption(['css' => 'input']);
        // 5 | assertNotChecked | css=input |  |
        $I->dontSeeCheckboxIsChecked(['css' => 'input']);
    }
    public function click(AcceptanceTester $I){
        // Test name: click
        // Step # | name | target | value | comment
        // 1 | open | / |  |
        $I->amOnPage("/");
        // 2 | click | linkText=Dropdown |  |
        $I->click(['link' => 'Dropdown']);
        // 3 | assertText | css=h3 | Dropdown List |
        $I->see("Dropdown List", ['css' => 'h3']);
        // 4 | open | / |  |
        $I->amOnPage("/");
        // 5 | click | link=Dropdown |  |
        $I->click(['link' => 'Dropdown']);
        // 6 | assertText | css=h3 | Dropdown List |
        $I->see("Dropdown List", ['css' => 'h3']);
        // 7 | open | / |  |
        $I->amOnPage("/");
        // 8 | click | partialLinkText=ropd |  |
        $I->click('ropd');
        // 9 | assertText | css=h3 | Dropdown List |
        $I->see("Dropdown List", ['css' => 'h3']);
    }
    public function clickAt(AcceptanceTester $I){
        // Test name: click at
        // Step # | name | target | value | comment
        // 1 | open | / |  |
        $I->amOnPage("/");
        // 2 | clickAt | css=a |  |
        $I->click(['css' => 'a']);
    }
    public function accessVariable(AcceptanceTester $I){
        // Test name: access variable
        // Step # | name | target | value | comment
        // 1 | storeJson | {"a": [{"b":0}, {"b":1}]} | blah |
        $blah = json_decode('{"a": [{"b":0}, {"b":1}]}');
        // 2 | store | ${blah.a[0].b} | result |
        //$result = "${blah.a[0].b}";
        // 3 | assert | result | 0 |
        $I->assertEquals($result,"0");
    }
    public function executeScript(AcceptanceTester $I){
        // Test name: execute script
        // Step # | name | target | value | comment
        // 1 | executeScript | return true | blah |
        $blah = $I->executeJS("return true");
        // 2 | assert | blah | true |
        $I->assertEquals($blah,true);
        // 4 | echo | ${blah} |  |
        print($blah);
    }
    public function executeScriptArray(AcceptanceTester $I){
        // Test name: execute script array
        // Step # | name | target | value | comment
        // 1 | executeScript | return [1,2,3] | x |
        $x = $I->executeJS("return [1,2,3]");
        // 2 | executeScript | return ${x}[0] + 1 | y |

        $y = $I->executeJS("return arguments[0][0] + 1", $x);
        // 3 | assert | y | 2 |
        $I->assertEquals($y,"2");
    }
    public function executeScriptPrimitives(AcceptanceTester $I){
        // Test name: execute script primitives
        // Step # | name | target | value | comment
        // 1 | executeScript | return true | bool |
        $bool = $I->executeJS("return true");
        // 2 | assert | bool | true |
        $I->assertEquals($bool,true);
        // 3 | executeScript | return 3.14 | float |
        $float = $I->executeJS("return 3.14");
        // 4 | assert | float | 3.14 |
        $I->assertEquals($float,3.14);
        // 5 | executeScript | return "test" | string |
        $string = $I->executeJS("return 'test'");
        // 6 | assert | string | test |
        $I->assertEquals($string,"test");
    }
    public function frames(AcceptanceTester $I){
        // Test name: frames
        // Step # | name | target | value | comment
        // 1 | open | /nested_frames |  |
        $I->amOnPage("/nested_frames");
        // 2 | selectFrame | index=0 |  |
        $I->executeInSelenium(function (\Facebook\WebDriver\Remote\RemoteWebDriver $webdriver) {
            // 3 | selectFrame | index=1 |  |

            // 4 | assertText | css=#content | MIDDLE |
            $webdriver->switchTo()->frame(0);
            // 5 | selectFrame | relative=parent |  |

            // 6 | selectFrame | index=1 |  |
        });
        // 7 | assertText | css=#content | MIDDLE |
        $I->executeInSelenium(function (\Facebook\WebDriver\Remote\RemoteWebDriver $webdriver) {
            // 8 | selectFrame | relative=top |  |

            // 9 | selectFrame | index=0 |  |
            $webdriver->switchTo()->frame(1);
            // 10 | selectFrame | index=1 |  |

            // 11 | assertText | css=#content | MIDDLE |
        });
        $I->see("MIDDLE", ['css' => '#content']);
        $I->executeInSelenium(function (\Facebook\WebDriver\Remote\RemoteWebDriver $webdriver) {

            $webdriver->switchTo()->defaultContent();

        });
        $I->executeInSelenium(function (\Facebook\WebDriver\Remote\RemoteWebDriver $webdriver) {

            $webdriver->switchTo()->frame(1);

        });
        $I->see("MIDDLE", ['css' => '#content']);
        $I->executeInSelenium(function (\Facebook\WebDriver\Remote\RemoteWebDriver $webdriver) {

            $webdriver->switchTo()->defaultContent();

        });
        $I->executeInSelenium(function (\Facebook\WebDriver\Remote\RemoteWebDriver $webdriver) {

            $webdriver->switchTo()->frame(0);

        });
        $I->executeInSelenium(function (\Facebook\WebDriver\Remote\RemoteWebDriver $webdriver) {

            $webdriver->switchTo()->frame(1);

        });
        $I->see("MIDDLE", ['css' => '#content']);
    }
    public function select(AcceptanceTester $I){
        // Test name: select
        // Step # | name | target | value | comment
        // 1 | open | /dropdown |  |
        $I->amOnPage("/dropdown");
        // 2 | select | id=dropdown | value=1 |
        $I->selectOption(['id' => 'dropdown'], "1");
        // 3 | assertSelectedValue | id=dropdown | 1 |
        $I->seeInField(['id' => 'dropdown'], "1");
        // 4 | assertNotSelectedValue | id=dropdown | 2 |
        $I->dontSeeInField(['id' => 'dropdown'], 2);
        // 5 | assertSelectedLabel | id=dropdown | Option 1 |
        $I->seeInField(['id' => 'dropdown'], "Option 1");
        // 6 | select | id=dropdown | Option 2 |
        $I->selectOption(['id' => 'dropdown'], "undefined");
        // 7 | assertSelectedValue | id=dropdown | 2 |
        $I->seeInField(['id' => 'dropdown'], "2");
        // 8 | assertNotSelectedValue | id=dropdown | 1 |
        $I->dontSeeInField(['id' => 'dropdown'], 1);
        // 9 | assertSelectedLabel | id=dropdown | Option 2 |
        $I->seeInField(['id' => 'dropdown'], "Option 2");
    }
    public function sendKeys(AcceptanceTester $I){
        // Test name: send keys
        // Step # | name | target | value | comment
        // 1 | open | /login |  |
        $I->amOnPage("/login");
        // 2 | sendKeys | css=#username | tomsmith |
        $I->fillField(['css' => '#username'], "tomsmith");
        // 3 | sendKeys | xpath=//input[@id='password'] | SuperSecretPassword!${KEY_ENTER} |
        $I->fillField(['xpath' => "//input[@id=\"password\"]"], "SuperSecretPassword!");
        $I->pressKey(['xpath' => "//input[@id=\"password\"]"],\Facebook\WebDriver\WebDriverKeys::ENTER);

        // 4 | assertText | id=flash | You logged into a secure area!\nÃ— |
        $I->see("You logged into a secure area!", ['id' => 'flash']);
    }
    public function storeText(AcceptanceTester $I){
        // Test name: store text
        // Step # | name | target | value | comment
        // 1 | open | /login |  |
        $I->amOnPage("/login");
        // 2 | sendKeys | css=#username | blah |
        $I->fillField(['css' => '#username'], "blah");
        // 3 | storeValue | css=#username | aVar |
        $aVar = $I->grabValueFrom(['css' => '#username']);
        // 4 | assert | aVar | blah |
        $I->assertEquals($aVar,"blah");
    }
    public function submit(AcceptanceTester $I){
        // Test name: submit
        // Step # | name | target | value | comment
        // 1 | open | /login |  |
        $I->amOnPage("/login");
        // 2 | sendKeys | css=#username | tomsmith |
        $I->fillField(['css' => '#username'], "tomsmith");
        // 3 | sendKeys | css=#password | SuperSecretPassword! |
        $I->fillField(['css' => '#password'], "SuperSecretPassword!");
        // 4 | submit | css=#login |  |
        $I->click(['css' => 'input[type=submit]']);
        // 5 | assertElementPresent | css=.flash.success |  |
        $I->seeElementInDOM(['css' => '.flash.success']);
    }
    public function confirmationDialog(AcceptanceTester $I){
        // Test name: confirmation dialog
        // Step # | name | target | value | comment
        // 1 | open | /javascript_alerts |  |
        $I->amOnPage("/javascript_alerts");
        // 3 | click | css=li:nth-child(2) > button |  |
        $I->click(['css' => 'li:nth-child(2) > button']);
        // 4 | assertConfirmation | I am a JS Confirm |  |
        $I->seeInPopup('I am a JS Confirm');
    // 5 | webdriverChooseOkOnVisibleConfirmation |  |  |
    $I->acceptPopup();
  }
}
